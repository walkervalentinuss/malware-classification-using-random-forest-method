# -*- coding: utf-8 -*-
"""
Created on Sat Nov 25 11:09:16 2023
Created on Mon Nov 27 09:30:20 2023
Created on Mon Nov 27 15:11:20 2023

@author: walkervalentinus
@author: aldijeremysimamora
@author: priskilaparapat
@author: karinasitumorang
@author: MutiaraSimanjuntak
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, balanced_accuracy_score

df = pd.read_csv('android_traffic.csv', sep=';')

df_copy = df.copy()

# Menghapus kolom yang memiliki NaN 100%
columns_to_remove = ['duracion','avg_local_pkt_rate','avg_remote_pkt_rate']
df_copy = df_copy.drop(columns = columns_to_remove)

X = df_copy.iloc[:, :-1].values # Independent Feature
y = df_copy.iloc[:, 13].values # Dependent Feature

encoder = OneHotEncoder(handle_unknown='ignore')
X = encoder.fit_transform(X).toarray()

label_encoder_y = LabelEncoder()
y = label_encoder_y.fit_transform(y)

X_Train, X_Test, y_Train, y_Test = train_best_split(\
                                                    X,
                                                    y,
                                                    test_size = 0.2,
                                                    random_state = 100)

model_rf = RandomForestClassifier(\
                                   n_estimators=500,
                                   min_samples_split=5,
                                   class_weight="balanced",
                                   random_state=100)

model_rf.fit(X_Train, y_Train)
y_pred = model_rf.predict(X_Test)

print(confusion_matrix(y_Test, y_pred))
print("Accuracy: ", accuracy_score(y_Test, y_pred))
print("Balanced Accuracy: ", balanced_accuracy_score(y_Test, y_pred))
